// <auto-generated />
using System;
using MVCMedicalController.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCMedicalController.Migrations
{
    [DbContext(typeof(MedicalContextDB))]
    [Migration("20221018025001_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MVCMedicalController.Models.Cabinet", b =>
                {
                    b.Property<int>("CabinetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CabinetID"), 1L, 1);

                    b.Property<string>("CabinetNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("CabinetNumber");

                    b.HasKey("CabinetID");

                    b.ToTable("Cabinets", (string)null);
                });

            modelBuilder.Entity("MVCMedicalController.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"), 1L, 1);

                    b.Property<int>("CabinetID")
                        .HasColumnType("int")
                        .HasColumnName("CabinetID");

                    b.Property<string>("DoctorFatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DoctorFatherName");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DoctorName");

                    b.Property<string>("DoctorSoName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("DoctorSoName");

                    b.Property<int?>("SectorID")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("SectorID");

                    b.Property<int>("SpecialityID")
                        .HasColumnType("int")
                        .HasColumnName("SpecialityID");

                    b.HasKey("DoctorID");

                    b.HasIndex("CabinetID");

                    b.HasIndex("SectorID");

                    b.HasIndex("SpecialityID");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("MVCMedicalController.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Adress");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("PatientFatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PatientFatherName");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PatientName");

                    b.Property<string>("PatientSoName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PatientSoName");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Sex");

                    b.Property<int?>("sectorID")
                        .HasColumnType("int")
                        .HasColumnName("sectorID");

                    b.HasKey("PatientId");

                    b.HasIndex("sectorID");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("MVCMedicalController.Models.Sector", b =>
                {
                    b.Property<int>("SectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorID"), 1L, 1);

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("SectorName");

                    b.HasKey("SectorID");

                    b.ToTable("Sectors", (string)null);
                });

            modelBuilder.Entity("MVCMedicalController.Models.Speciality", b =>
                {
                    b.Property<int>("SpecialityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityID"), 1L, 1);

                    b.Property<string>("SpecialityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SpecialityName");

                    b.HasKey("SpecialityID");

                    b.ToTable("Specialties", (string)null);
                });

            modelBuilder.Entity("MVCMedicalController.Models.Doctor", b =>
                {
                    b.HasOne("MVCMedicalController.Models.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCMedicalController.Models.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCMedicalController.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");

                    b.Navigation("Sector");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("MVCMedicalController.Models.Patient", b =>
                {
                    b.HasOne("MVCMedicalController.Models.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("sectorID");

                    b.Navigation("Sector");
                });
#pragma warning restore 612, 618
        }
    }
}
